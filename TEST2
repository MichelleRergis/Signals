%  Instituto: Tecnologico de Monterrey Campus Estado de Mexico
% Autor:     Rergis Novelo Michelle and Marisol S. Ramírez Herrera
%  Date:     September 6, 2024
% Subject:   Analysis of Signals and Systems
%  Program:  TEST2.mlx
%  Objective:  Generates an average signal from the samples obtained. The average signal is generated from the samples obtained from the same person with the indicated phrase.
% analysis and is saved in a new file to be used in the next % comparative analysis with other voices.
% comparative analysis with other voices.
clear all; close all; clc
%We read all the audio saved with the same phrase and the same person already.
% an average signal will be generated
% We read the wav file generated with GrabaFilesWav.mlx
Mich01 = audioread('Sol01.wav');   
Mich02 = audioread('Sol02.wav');   
Mich03 = audioread('Sol03.wav');   
Mich04 = audioread('Sol04.wav');   
Mich05 = audioread('Sol05.wav');   
Mich06 = audioread('Sol06.wav');   
Mich07 = audioread('Sol07.wav');   
Mich08 = audioread('Sol08.wav');   
Mich09 = audioread('Sol09.wav');   
Mich10 = audioread('Sol10.wav');   
Mich11 = audioread('Sol11.wav');   
Mich12 = audioread('Sol12.wav');   
Mich13 = audioread('Sol13.wav');   
Mich14 = audioread('Sol14.wav');   
Mich15 = audioread('Sol15.wav');   
Mich16 = audioread('Sol16.wav');   
Mich17 = audioread('Sol17.wav');   
Mich18 = audioread('Sol18.wav');   
Mich19 = audioread('Sol19.wav');   
Mich20 = audioread('Sol20.wav');   
%{
Now, create an average signal from all the samples you have.
 Display time and frequency domain plots of that averaged signal.
%}
% We assign the values of each file to a table in the form of columns.
Michrec = table(Mich01, Mich02, Mich03, Mich04, Mich05, Mich06, Mich07, Mich08, Mich09, Mich10, Mich11, Mich12, Mich13, Mich14, Mich15, Mich16, Mich17, Mich18, Mich19, Mich20);
% We obtain the average signal
fs = 44100;   % recording sampling frequency that allows to homologate the audios
M  = table2array(mean(Michrec,2));
audiowrite('SolProm.wav',M,fs);
sound(M,fs);
% Time axis for the Plot
q      = 5;                          % Duration of recordings
qa     = numel(M);                   %  Gets the total number of elements of the audio read.
t      = (0:q/qa:q-q/qa)';           % Within the time scale q the file values are divided into
figure('Name','Measured Data from Michelle files');      % Creates a new figure window
plot(t, Mich01, t, M);                          % 2D line graphics
xlabel('Time (secs)');               % Generates the title of x
ylabel('Amplitude (V)');             % Generates the title of y
title('Waveform of Recorded Voice'); % Generates the title of the graphic
%{
Perform the same statistical analysis you did for your first voice signal,
 but of your average signal. Show comparative graphs and tables of time domain data and discuss whether there are significant differences.
 time domain data and discuss whether there are significant differences.
%}
% Obtain data in double precision array
% myRecording = audioread('Mich02.wav');
% Time axis
qa = numel(M);
t = (0:q/qa:q-q/qa)';
% Calculates the sampling frequency
Ts = q/qa;  % Sampling time
fs = 1/Ts;  % Sampling frequency
[na, nb] = size(t(:));  % na = number of signal points
ff = fs*[0:na-1]/na - fs/2;
% Waveform graph
plot(t, M);
xlabel('Time (secs)');
ylabel('Amplitude (V)');
title('Waveform of Recorded Voice');
% Statistical Analysis
mean_val       = mean(M);
var_val        = var(M);
std_val        = std(M);
skewness_val   = skewness(M); % assimetry of the data distribution
kurtosis_val   = kurtosis(M); % indicates whether the signal has large or small amplitudes, more or fewer than expected in a normal distribution. 
dispersion_val = var_val / std_val;
% Histogram
%{
 The histogram is a grpahical representation of the frequency distribution for the data. In this case, it shows the distribution of the signals’ amplitude and which amplitude ranges occur more frequently. 
%}
figure;
histogram(M, 50);
xlabel('Amplitude');
ylabel('Frequency');
title('Histogram of Amplitude');
% Cumulative Distribution Function (CDF)
figure;
cdfplot(M);
xlabel('Amplitude');
ylabel('CDF');
title('Cumulative Distribution Function (CDF)');
% PDF using an kernel density estimation
figure;
[f_pdf, xi_pdf] = ksdensity(M);  % PDF
plot(xi_pdf, f_pdf);
xlabel('Amplitude');
ylabel('PDF');
title('Probability Density Function (PDF)');
% Table of results
stat_table = table(mean_val, var_val, std_val, skewness_val, ...
   kurtosis_val, dispersion_val, 'VariableNames', ...
   {'Mean', 'Variance', 'Std_Deviation', 'Skewness', ...
   'Kurtosis', 'Dispersion'});
disp('Statistical Analysis Results:');
disp(stat_table);
% Signal modulation (optional, does not affect statistical analysis)
f1 = 2500;  % Frequency for modulation (not used in analysis)
cs = cos(2*pi*f1*t);
mods = cs.*M;
figure;
plot(ff, fftshift(abs(fft(M))),'r') %Fast Fourier Transform
xlabel('Frequency (Hz)')
ylabel('Magnitude (V)')
title('Frequency Spectrum of Recorded Voice');
% Autocorrelation
%{
   Autocorrelation measures the similarity of the signal to itself at different time delays, which can reveal repetitive patterns or periodicity in the signal.
   time delays, which can reveal repetitive patterns or periodicity in the signal.
%}
%{ Calculate the autocorrelation of the recorded signal
[autocorr, lags] = xcorr(M, 'normalized');  % normalized' normalizes the autocorrelation
%Plot autocorrelation
figure;
plot(lags, autocorr);
xlabel('Lags');
ylabel('Autocorrelation');
title('Autocorrelation of Recorded Voice Signal');
